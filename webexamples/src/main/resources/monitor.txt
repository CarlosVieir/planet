Контроль за доступом к объекту-ресурсу обеспечивает понятие монитора.
Монитор экземпляра может иметь только одного владельца. При попытке кон-
курирующего доступа к объекту, чей монитор имеет владельца, желающий за-
блокировать объект-ресурс поток должен подождать освобождения монитора
этого объекта и только после этого завладеть им и начать использование объек-
та-ресурса. Каждый экземпляр любого класса имеет монитор. Методы wait(),
wait(long inmillis), notify(), notifyAll() корректно срабатывают только на  эк-
земплярах, чей монитор уже кем-то захвачен. Статический метод захватывает
монитор экземпляра класса Class, того класса, на котором он вызван. Существует
в единственном экземпляре. Нестатический метод захватывает монитор экзем-
пляра класса, на котором он вызван.

Методы wait(), notify() и notifyAll()
Эти методы никогда не переопределяются и используются только в исход-
ном виде. Вызываются только внутри синхронизированного блока или метода
на объекте, монитор которого захвачен текущим потоком. Попытка обращения
к данным методам вне синхронизации или на несинхронизированном объекте
(со  свободным монитором) приводит к  генерации исключительной ситуации
IllegalMonitorStateException. В примере #15 рассмотрено взаимодействие ме-
тодов wait() и notify() при освобождении и возврате блокировки в synchronized
блоке. Эти методы используются для управления потоками в ситуации, когда
необходимо задать определенную последовательность действий без повторного
запуска потоков.
Метод wait(), вызванный внутри синхронизированного блока или метода,
останавливает выполнение текущего потока и освобождает от блокировки за-
хваченный объект. Возвратить блокировку объекта потоку можно вызовом ме-
тода notify() для одного потока или notifyAll() для всех потоков. Если ожидаю-
щих потоков несколько, то после вызова метода notify() невозможно определить,
какой поток из  ожидающих потоков заблокирует объект. Вызов может быть
осуществлен только из  другого потока, заблокировавшего в  свою очередь
тот же самый объект.

Семафор

Семафор позволяет управлять доступом к ресурсам или просто работой по-
токов на  основе запрещений-разрешений. Семафор всегда устанавливается
на предельное положительное число потоков, одновременное функционирова-
ние которых может быть разрешено. При превышении предельного числа все
желающие работать потоки будут приостановлены до освобождения семафора
одним из работающих по его разрешению потоков. Уменьшение счетчика досту-
па производится методами void acquire() и его оболочки boolean tryAcquire().
Оба метода занимают семафор, если он свободен. Если  же семафор занят,
то метод tryAcquire() возвращает ложь и пропускает поток дальше, что позво-
ляет при необходимости отказаться от  дальнейшей работы потоку, который
не смог получить семафор. Метод acquire() при невозможности захвата сема-
фора остановит поток до тех пор, пока хотя бы другой поток не освободит се-
мафор. Метод boolean tryAcquire(long timeout,TimeUnit unit) возвращает
311ИСПОЛЬЗОВАНИЕ КЛАССОВ И БИБЛИОТЕК
ложь, если время ожидания превышено, т. е. за указанное время поток не полу-
чил от  семафора разрешение работать и  пропускает поток дальше. Метод
release() освобождает семафор и  увеличивает счетчик на  единицу. Простое
надежное стандартное взаимодействие методов acquire() и  release() демон-
стрирует следующий фрагмент.